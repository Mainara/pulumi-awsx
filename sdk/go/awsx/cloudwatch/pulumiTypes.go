// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-awsx/sdk/go/awsx/resource"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Log group with default setup unless explicitly skipped.
type DefaultLogGroup struct {
	// Arguments to use instead of the default values during creation.
	Args *LogGroup `pulumi:"args"`
	// Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
	Existing *ExistingLogGroup `pulumi:"existing"`
	// Resource options to be used during creation of the log group.
	Opts *resource.NestedResourceOptions `pulumi:"opts"`
	// Skip creation of the log group.
	Skip *bool `pulumi:"skip"`
}

// DefaultLogGroupInput is an input type that accepts DefaultLogGroupArgs and DefaultLogGroupOutput values.
// You can construct a concrete instance of `DefaultLogGroupInput` via:
//
//          DefaultLogGroupArgs{...}
type DefaultLogGroupInput interface {
	pulumi.Input

	ToDefaultLogGroupOutput() DefaultLogGroupOutput
	ToDefaultLogGroupOutputWithContext(context.Context) DefaultLogGroupOutput
}

// Log group with default setup unless explicitly skipped.
type DefaultLogGroupArgs struct {
	// Arguments to use instead of the default values during creation.
	Args *LogGroupArgs `pulumi:"args"`
	// Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
	Existing *ExistingLogGroupArgs `pulumi:"existing"`
	// Resource options to be used during creation of the log group.
	Opts *resource.NestedResourceOptionsArgs `pulumi:"opts"`
	// Skip creation of the log group.
	Skip *bool `pulumi:"skip"`
}

func (DefaultLogGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultLogGroup)(nil)).Elem()
}

func (i DefaultLogGroupArgs) ToDefaultLogGroupOutput() DefaultLogGroupOutput {
	return i.ToDefaultLogGroupOutputWithContext(context.Background())
}

func (i DefaultLogGroupArgs) ToDefaultLogGroupOutputWithContext(ctx context.Context) DefaultLogGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultLogGroupOutput)
}

func (i DefaultLogGroupArgs) ToDefaultLogGroupPtrOutput() DefaultLogGroupPtrOutput {
	return i.ToDefaultLogGroupPtrOutputWithContext(context.Background())
}

func (i DefaultLogGroupArgs) ToDefaultLogGroupPtrOutputWithContext(ctx context.Context) DefaultLogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultLogGroupOutput).ToDefaultLogGroupPtrOutputWithContext(ctx)
}

// DefaultLogGroupPtrInput is an input type that accepts DefaultLogGroupArgs, DefaultLogGroupPtr and DefaultLogGroupPtrOutput values.
// You can construct a concrete instance of `DefaultLogGroupPtrInput` via:
//
//          DefaultLogGroupArgs{...}
//
//  or:
//
//          nil
type DefaultLogGroupPtrInput interface {
	pulumi.Input

	ToDefaultLogGroupPtrOutput() DefaultLogGroupPtrOutput
	ToDefaultLogGroupPtrOutputWithContext(context.Context) DefaultLogGroupPtrOutput
}

type defaultLogGroupPtrType DefaultLogGroupArgs

func DefaultLogGroupPtr(v *DefaultLogGroupArgs) DefaultLogGroupPtrInput {
	return (*defaultLogGroupPtrType)(v)
}

func (*defaultLogGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultLogGroup)(nil)).Elem()
}

func (i *defaultLogGroupPtrType) ToDefaultLogGroupPtrOutput() DefaultLogGroupPtrOutput {
	return i.ToDefaultLogGroupPtrOutputWithContext(context.Background())
}

func (i *defaultLogGroupPtrType) ToDefaultLogGroupPtrOutputWithContext(ctx context.Context) DefaultLogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultLogGroupPtrOutput)
}

// Log group with default setup unless explicitly skipped.
type DefaultLogGroupOutput struct{ *pulumi.OutputState }

func (DefaultLogGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultLogGroup)(nil)).Elem()
}

func (o DefaultLogGroupOutput) ToDefaultLogGroupOutput() DefaultLogGroupOutput {
	return o
}

func (o DefaultLogGroupOutput) ToDefaultLogGroupOutputWithContext(ctx context.Context) DefaultLogGroupOutput {
	return o
}

func (o DefaultLogGroupOutput) ToDefaultLogGroupPtrOutput() DefaultLogGroupPtrOutput {
	return o.ToDefaultLogGroupPtrOutputWithContext(context.Background())
}

func (o DefaultLogGroupOutput) ToDefaultLogGroupPtrOutputWithContext(ctx context.Context) DefaultLogGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultLogGroup) *DefaultLogGroup {
		return &v
	}).(DefaultLogGroupPtrOutput)
}

// Arguments to use instead of the default values during creation.
func (o DefaultLogGroupOutput) Args() LogGroupPtrOutput {
	return o.ApplyT(func(v DefaultLogGroup) *LogGroup { return v.Args }).(LogGroupPtrOutput)
}

// Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
func (o DefaultLogGroupOutput) Existing() ExistingLogGroupPtrOutput {
	return o.ApplyT(func(v DefaultLogGroup) *ExistingLogGroup { return v.Existing }).(ExistingLogGroupPtrOutput)
}

// Resource options to be used during creation of the log group.
func (o DefaultLogGroupOutput) Opts() resource.NestedResourceOptionsPtrOutput {
	return o.ApplyT(func(v DefaultLogGroup) *resource.NestedResourceOptions { return v.Opts }).(resource.NestedResourceOptionsPtrOutput)
}

// Skip creation of the log group.
func (o DefaultLogGroupOutput) Skip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DefaultLogGroup) *bool { return v.Skip }).(pulumi.BoolPtrOutput)
}

type DefaultLogGroupPtrOutput struct{ *pulumi.OutputState }

func (DefaultLogGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultLogGroup)(nil)).Elem()
}

func (o DefaultLogGroupPtrOutput) ToDefaultLogGroupPtrOutput() DefaultLogGroupPtrOutput {
	return o
}

func (o DefaultLogGroupPtrOutput) ToDefaultLogGroupPtrOutputWithContext(ctx context.Context) DefaultLogGroupPtrOutput {
	return o
}

func (o DefaultLogGroupPtrOutput) Elem() DefaultLogGroupOutput {
	return o.ApplyT(func(v *DefaultLogGroup) DefaultLogGroup {
		if v != nil {
			return *v
		}
		var ret DefaultLogGroup
		return ret
	}).(DefaultLogGroupOutput)
}

// Arguments to use instead of the default values during creation.
func (o DefaultLogGroupPtrOutput) Args() LogGroupPtrOutput {
	return o.ApplyT(func(v *DefaultLogGroup) *LogGroup {
		if v == nil {
			return nil
		}
		return v.Args
	}).(LogGroupPtrOutput)
}

// Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
func (o DefaultLogGroupPtrOutput) Existing() ExistingLogGroupPtrOutput {
	return o.ApplyT(func(v *DefaultLogGroup) *ExistingLogGroup {
		if v == nil {
			return nil
		}
		return v.Existing
	}).(ExistingLogGroupPtrOutput)
}

// Resource options to be used during creation of the log group.
func (o DefaultLogGroupPtrOutput) Opts() resource.NestedResourceOptionsPtrOutput {
	return o.ApplyT(func(v *DefaultLogGroup) *resource.NestedResourceOptions {
		if v == nil {
			return nil
		}
		return v.Opts
	}).(resource.NestedResourceOptionsPtrOutput)
}

// Skip creation of the log group.
func (o DefaultLogGroupPtrOutput) Skip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultLogGroup) *bool {
		if v == nil {
			return nil
		}
		return v.Skip
	}).(pulumi.BoolPtrOutput)
}

// Reference to an existing log group.
type ExistingLogGroup struct {
	// Region of the log group. If not specified, the provider region will be used.
	Existing *string `pulumi:"existing"`
	// Name of the log group.
	Name string `pulumi:"name"`
}

// ExistingLogGroupInput is an input type that accepts ExistingLogGroupArgs and ExistingLogGroupOutput values.
// You can construct a concrete instance of `ExistingLogGroupInput` via:
//
//          ExistingLogGroupArgs{...}
type ExistingLogGroupInput interface {
	pulumi.Input

	ToExistingLogGroupOutput() ExistingLogGroupOutput
	ToExistingLogGroupOutputWithContext(context.Context) ExistingLogGroupOutput
}

// Reference to an existing log group.
type ExistingLogGroupArgs struct {
	// Region of the log group. If not specified, the provider region will be used.
	Existing pulumi.StringPtrInput `pulumi:"existing"`
	// Name of the log group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ExistingLogGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExistingLogGroup)(nil)).Elem()
}

func (i ExistingLogGroupArgs) ToExistingLogGroupOutput() ExistingLogGroupOutput {
	return i.ToExistingLogGroupOutputWithContext(context.Background())
}

func (i ExistingLogGroupArgs) ToExistingLogGroupOutputWithContext(ctx context.Context) ExistingLogGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExistingLogGroupOutput)
}

func (i ExistingLogGroupArgs) ToExistingLogGroupPtrOutput() ExistingLogGroupPtrOutput {
	return i.ToExistingLogGroupPtrOutputWithContext(context.Background())
}

func (i ExistingLogGroupArgs) ToExistingLogGroupPtrOutputWithContext(ctx context.Context) ExistingLogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExistingLogGroupOutput).ToExistingLogGroupPtrOutputWithContext(ctx)
}

// ExistingLogGroupPtrInput is an input type that accepts ExistingLogGroupArgs, ExistingLogGroupPtr and ExistingLogGroupPtrOutput values.
// You can construct a concrete instance of `ExistingLogGroupPtrInput` via:
//
//          ExistingLogGroupArgs{...}
//
//  or:
//
//          nil
type ExistingLogGroupPtrInput interface {
	pulumi.Input

	ToExistingLogGroupPtrOutput() ExistingLogGroupPtrOutput
	ToExistingLogGroupPtrOutputWithContext(context.Context) ExistingLogGroupPtrOutput
}

type existingLogGroupPtrType ExistingLogGroupArgs

func ExistingLogGroupPtr(v *ExistingLogGroupArgs) ExistingLogGroupPtrInput {
	return (*existingLogGroupPtrType)(v)
}

func (*existingLogGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExistingLogGroup)(nil)).Elem()
}

func (i *existingLogGroupPtrType) ToExistingLogGroupPtrOutput() ExistingLogGroupPtrOutput {
	return i.ToExistingLogGroupPtrOutputWithContext(context.Background())
}

func (i *existingLogGroupPtrType) ToExistingLogGroupPtrOutputWithContext(ctx context.Context) ExistingLogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExistingLogGroupPtrOutput)
}

// Reference to an existing log group.
type ExistingLogGroupOutput struct{ *pulumi.OutputState }

func (ExistingLogGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExistingLogGroup)(nil)).Elem()
}

func (o ExistingLogGroupOutput) ToExistingLogGroupOutput() ExistingLogGroupOutput {
	return o
}

func (o ExistingLogGroupOutput) ToExistingLogGroupOutputWithContext(ctx context.Context) ExistingLogGroupOutput {
	return o
}

func (o ExistingLogGroupOutput) ToExistingLogGroupPtrOutput() ExistingLogGroupPtrOutput {
	return o.ToExistingLogGroupPtrOutputWithContext(context.Background())
}

func (o ExistingLogGroupOutput) ToExistingLogGroupPtrOutputWithContext(ctx context.Context) ExistingLogGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExistingLogGroup) *ExistingLogGroup {
		return &v
	}).(ExistingLogGroupPtrOutput)
}

// Region of the log group. If not specified, the provider region will be used.
func (o ExistingLogGroupOutput) Existing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExistingLogGroup) *string { return v.Existing }).(pulumi.StringPtrOutput)
}

// Name of the log group.
func (o ExistingLogGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExistingLogGroup) string { return v.Name }).(pulumi.StringOutput)
}

type ExistingLogGroupPtrOutput struct{ *pulumi.OutputState }

func (ExistingLogGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExistingLogGroup)(nil)).Elem()
}

func (o ExistingLogGroupPtrOutput) ToExistingLogGroupPtrOutput() ExistingLogGroupPtrOutput {
	return o
}

func (o ExistingLogGroupPtrOutput) ToExistingLogGroupPtrOutputWithContext(ctx context.Context) ExistingLogGroupPtrOutput {
	return o
}

func (o ExistingLogGroupPtrOutput) Elem() ExistingLogGroupOutput {
	return o.ApplyT(func(v *ExistingLogGroup) ExistingLogGroup {
		if v != nil {
			return *v
		}
		var ret ExistingLogGroup
		return ret
	}).(ExistingLogGroupOutput)
}

// Region of the log group. If not specified, the provider region will be used.
func (o ExistingLogGroupPtrOutput) Existing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExistingLogGroup) *string {
		if v == nil {
			return nil
		}
		return v.Existing
	}).(pulumi.StringPtrOutput)
}

// Name of the log group.
func (o ExistingLogGroupPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExistingLogGroup) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The set of arguments for constructing a LogGroup resource.
type LogGroup struct {
	// The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
	// AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
	// permissions for the CMK whenever the encrypted data is requested.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The name of the log group. If omitted, this provider will assign a random, unique name.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Specifies the number of days
	// you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, and 0.
	// If you select 0, the events in the log group are always retained and never expire.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// LogGroupInput is an input type that accepts LogGroupArgs and LogGroupOutput values.
// You can construct a concrete instance of `LogGroupInput` via:
//
//          LogGroupArgs{...}
type LogGroupInput interface {
	pulumi.Input

	ToLogGroupOutput() LogGroupOutput
	ToLogGroupOutputWithContext(context.Context) LogGroupOutput
}

// The set of arguments for constructing a LogGroup resource.
type LogGroupArgs struct {
	// The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
	// AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
	// permissions for the CMK whenever the encrypted data is requested.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The name of the log group. If omitted, this provider will assign a random, unique name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// Specifies the number of days
	// you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, and 0.
	// If you select 0, the events in the log group are always retained and never expire.
	RetentionInDays pulumi.IntPtrInput `pulumi:"retentionInDays"`
	// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LogGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroup)(nil)).Elem()
}

func (i LogGroupArgs) ToLogGroupOutput() LogGroupOutput {
	return i.ToLogGroupOutputWithContext(context.Background())
}

func (i LogGroupArgs) ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupOutput)
}

func (i LogGroupArgs) ToLogGroupPtrOutput() LogGroupPtrOutput {
	return i.ToLogGroupPtrOutputWithContext(context.Background())
}

func (i LogGroupArgs) ToLogGroupPtrOutputWithContext(ctx context.Context) LogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupOutput).ToLogGroupPtrOutputWithContext(ctx)
}

// LogGroupPtrInput is an input type that accepts LogGroupArgs, LogGroupPtr and LogGroupPtrOutput values.
// You can construct a concrete instance of `LogGroupPtrInput` via:
//
//          LogGroupArgs{...}
//
//  or:
//
//          nil
type LogGroupPtrInput interface {
	pulumi.Input

	ToLogGroupPtrOutput() LogGroupPtrOutput
	ToLogGroupPtrOutputWithContext(context.Context) LogGroupPtrOutput
}

type logGroupPtrType LogGroupArgs

func LogGroupPtr(v *LogGroupArgs) LogGroupPtrInput {
	return (*logGroupPtrType)(v)
}

func (*logGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGroup)(nil)).Elem()
}

func (i *logGroupPtrType) ToLogGroupPtrOutput() LogGroupPtrOutput {
	return i.ToLogGroupPtrOutputWithContext(context.Background())
}

func (i *logGroupPtrType) ToLogGroupPtrOutputWithContext(ctx context.Context) LogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupPtrOutput)
}

// The set of arguments for constructing a LogGroup resource.
type LogGroupOutput struct{ *pulumi.OutputState }

func (LogGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroup)(nil)).Elem()
}

func (o LogGroupOutput) ToLogGroupOutput() LogGroupOutput {
	return o
}

func (o LogGroupOutput) ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput {
	return o
}

func (o LogGroupOutput) ToLogGroupPtrOutput() LogGroupPtrOutput {
	return o.ToLogGroupPtrOutputWithContext(context.Background())
}

func (o LogGroupOutput) ToLogGroupPtrOutputWithContext(ctx context.Context) LogGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogGroup) *LogGroup {
		return &v
	}).(LogGroupPtrOutput)
}

// The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
// AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
// permissions for the CMK whenever the encrypted data is requested.
func (o LogGroupOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogGroup) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The name of the log group. If omitted, this provider will assign a random, unique name.
func (o LogGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o LogGroupOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogGroup) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// Specifies the number of days
// you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, and 0.
// If you select 0, the events in the log group are always retained and never expire.
func (o LogGroupOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogGroup) *int { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LogGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogGroup) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type LogGroupPtrOutput struct{ *pulumi.OutputState }

func (LogGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGroup)(nil)).Elem()
}

func (o LogGroupPtrOutput) ToLogGroupPtrOutput() LogGroupPtrOutput {
	return o
}

func (o LogGroupPtrOutput) ToLogGroupPtrOutputWithContext(ctx context.Context) LogGroupPtrOutput {
	return o
}

func (o LogGroupPtrOutput) Elem() LogGroupOutput {
	return o.ApplyT(func(v *LogGroup) LogGroup {
		if v != nil {
			return *v
		}
		var ret LogGroup
		return ret
	}).(LogGroupOutput)
}

// The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
// AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
// permissions for the CMK whenever the encrypted data is requested.
func (o LogGroupPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogGroup) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The name of the log group. If omitted, this provider will assign a random, unique name.
func (o LogGroupPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogGroup) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o LogGroupPtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogGroup) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of days
// you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, and 0.
// If you select 0, the events in the log group are always retained and never expire.
func (o LogGroupPtrOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogGroup) *int {
		if v == nil {
			return nil
		}
		return v.RetentionInDays
	}).(pulumi.IntPtrOutput)
}

// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LogGroupPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogGroup) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultLogGroupInput)(nil)).Elem(), DefaultLogGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultLogGroupPtrInput)(nil)).Elem(), DefaultLogGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExistingLogGroupInput)(nil)).Elem(), ExistingLogGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExistingLogGroupPtrInput)(nil)).Elem(), ExistingLogGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupInput)(nil)).Elem(), LogGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupPtrInput)(nil)).Elem(), LogGroupArgs{})
	pulumi.RegisterOutputType(DefaultLogGroupOutput{})
	pulumi.RegisterOutputType(DefaultLogGroupPtrOutput{})
	pulumi.RegisterOutputType(ExistingLogGroupOutput{})
	pulumi.RegisterOutputType(ExistingLogGroupPtrOutput{})
	pulumi.RegisterOutputType(LogGroupOutput{})
	pulumi.RegisterOutputType(LogGroupPtrOutput{})
}
